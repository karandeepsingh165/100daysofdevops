String env = ""
String directory = ""
String action = ""

pipeline {
    agent any
    tools {
        "org.jenkinsci.plugins.terraform.TerraformInstallation" "terraform"
    }
    parameters {
        string(name: 'WORKSPACE', defaultValue: 'c6-terraform', description:'setting up workspace for terraform')
    }

    environment {
       TF_HOME = tool('terraform')
        TP_LOG = "WARN"
       PATH = "$TF_HOME:$PATH"
   }

    stages {
        stage ('Select env') {
            steps {
                script {
                    try {
                        echo "Select env"
                        timeout(time: 300, unit: 'SECONDS') {
                            def userInput = input message: 'Select env',
                                parameters: [
                                    choice(name: 'env', choices: ['dev', 'int1', 'prod'])
                                ]
                            env = "${userInput}"
                            echo "Selected env is ${env}"
                        }
                    }
                    catch(err){
                        def user = err.getCauses()[0].getUser()
                        if('SYSTEM' == user.toString()) { // SYSTEM means timeout.
                            echo "Timed Out!"
                        } else {
                            echo "Stage Aborted by: [${user}]"
                        }
                    }
                }
            }   
        }
        stage ('Select Directory') {
            steps {
                script {
                    try {
                        echo "Select Directory"
                        if ( "${env}" == "dev" ) {
                            timeout(time: 300, unit: 'SECONDS') {
                                def userInput = input message: 'Select directory',
                                parameters: [
                                    choice(name: 'Directory', choices: ['services','shared'])
                                ]
                                module = "${userInput}"
                                echo "Selected Directory is ${directory}"
                            }
                        } else if ( "${env}" == "int1" ) {
                            timeout(time: 300, unit: 'SECONDS') {
                                def userInput = input message: 'Select Directory',
                                parameters: [
                                    choice(name: 'Directory', choices: ['services','shared'])
                                ]
                                module = "${userInput}"
                                echo "Selected Directory is ${directory}"
                            }
                        } else if ( "${env}" == "prod" ) {
                            timeout(time: 300, unit: 'SECONDS') {
                                def userInput = input message: 'Select Directory',
                                parameters: [
                                    choice(name: 'Directory', choices: ['services','shared'])
                                ]
                                module = "${userInput}"
                                echo "Selected Directory is ${directory}"
                            }
                        } else {
                            echo "Invalid env"
                        }
                    }
                    catch(err){
                        def user = err.getCauses()[0].getUser()
                        if('SYSTEM' == user.toString()) { // SYSTEM means timeout.
                            echo "Timed Out!"
                        } else {
                            echo "Stage Aborted by: [${user}]"
                        }
                    }
                }
            }   
        }
            stage('TerraformInit'){
            steps {
                dir('${env}/${directory}/'){
                    sh "terraform init -input=false"
                    sh "echo \$PWD"
                    sh "whoami"
                }
            }
        }

        stage('TerraformFormat'){
            steps {
                dir('${env}/${directory}/'){
                    sh "terraform fmt -list=true -write=false -diff=true -check=true"
                }
            }
        }

        stage('TerraformValidate'){
            steps {
                dir('${env}/${directory}/'){
                    sh "terraform validate"
                }
            }
        }

        stage('TerraformPlan'){
            steps {
                dir('${env}/${directory}/'){
                    script {
                        try {
                            sh "terraform workspace new ${params.WORKSPACE}"
                        } catch (err) {
                            sh "terraform workspace select ${params.WORKSPACE}"
                        }
                        sh "terraform plan \
                        -out terraform.tfplan;echo \$? > status"
                        stash name: "terraform-plan", includes: "terraform.tfplan"
                    }
                }
            }
        }
        
        stage('TerraformApply'){
            steps {
                script{
                    def apply = false
                    try {
                        input message: 'Confirm if you want to  apply the changes', ok: 'Ready to Apply the Configurations'
                        apply = true
                    } catch (err) {
                        apply = false
                         currentBuild.result = 'UNSTABLE'
                    }
                    if(apply){
                        dir('${env}/${directory}/'){
                            unstash "terraform-plan"
                            sh 'terraform apply terraform.tfplan' 
                        }
                    }
                }
            }
        }
    }
}
